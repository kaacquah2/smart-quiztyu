const fetch = require('node-fetch');

async function testDeepSeekIntegrationFixed() {
  console.log('üß† Testing DeepSeek AI Recommendations Integration (Fixed)...\n');

  const API_BASE = 'http://localhost:3001';

  // Test 1: Course-specific recommendations with valid course ID
  try {
    console.log('1. Testing course-specific DeepSeek recommendations...');
    const response = await fetch(`${API_BASE}/api/deepseek-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId: 'intro-to-cs', // Valid course ID from program data
        quizResults: [
          {
            quizId: 'intro-to-cs-basics',
            courseId: 'intro-to-cs',
            quizTitle: 'Introduction to Computer Science Basics',
            score: 85,
            total: 10,
            strengths: ['Basic Programming Concepts', 'Problem Solving'],
            weaknesses: ['Advanced Algorithms', 'Data Structures']
          }
        ]
      })
    });

    console.log(`Response status: ${response.status}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Success! Course-specific DeepSeek recommendations generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Recommendations: ${data.recommendations?.length || 0}`);
      if (data.recommendations?.length > 0) {
        console.log(`   First recommendation: ${data.recommendations[0].title}`);
        console.log(`   Type: ${data.recommendations[0].resourceType}`);
        console.log(`   Difficulty: ${data.recommendations[0].difficulty}`);
        console.log(`   Reasoning: ${data.recommendations[0].reasoning || 'N/A'}`);
        console.log(`   Priority: ${data.recommendations[0].priority || 'N/A'}`);
        console.log(`   Time: ${data.recommendations[0].estimatedTime || 'N/A'}`);
      }
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`‚ùå Error: ${response.status} - ${errorData.error || response.statusText}`);
      
      // Check if it's a quota issue
      if (errorData.error && errorData.error.includes('quota')) {
        console.log('‚ö†Ô∏è  DeepSeek API quota exceeded. This is expected if you have limited API credits.');
        console.log('   You can still test the fallback functionality.');
      }
    }
  } catch (error) {
    console.log('‚ùå Error testing course-specific recommendations:', error.message);
  }

  // Test 2: Filtered recommendations with valid program
  try {
    console.log('\n2. Testing filtered DeepSeek recommendations...');
    const response = await fetch(`${API_BASE}/api/deepseek-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        selectedProgram: 'computer-science',
        selectedYear: '1',
        selectedSemester: '1',
        quizResults: [
          {
            quizId: 'intro-to-cs',
            courseId: 'intro-to-cs',
            quizTitle: 'Introduction to Computer Science',
            score: 75,
            total: 10,
            strengths: ['Basic Programming', 'Problem Solving'],
            weaknesses: ['Advanced Algorithms', 'Data Structures']
          }
        ]
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Success! Filtered DeepSeek recommendations generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Course Recommendations: ${data.courseRecommendations?.length || 0}`);
      if (data.courseRecommendations?.length > 0) {
        console.log(`   First course: ${data.courseRecommendations[0].courseTitle}`);
        console.log(`   Recommendations: ${data.courseRecommendations[0].recommendations?.length || 0}`);
      }
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`‚ùå Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('‚ùå Error testing filtered recommendations:', error.message);
  }

  // Test 3: General recommendations
  try {
    console.log('\n3. Testing general DeepSeek recommendations...');
    const response = await fetch(`${API_BASE}/api/deepseek-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userProfile: {
          program: 'Computer Science',
          interests: ['Web Development', 'Machine Learning'],
          recentTopics: ['React', 'Node.js', 'Python'],
          learningStyle: 'visual',
          preferredDifficulty: 'intermediate',
          availableTime: 10
        },
        quizResults: [
          {
            quizId: 'data-structures',
            courseId: 'data-structures',
            quizTitle: 'Data Structures and Algorithms',
            score: 85,
            total: 10,
            strengths: ['Arrays', 'Linked Lists'],
            weaknesses: ['Dynamic Programming', 'Graph Algorithms'],
          }
        ]
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Success! General DeepSeek recommendations generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Recommendations: ${data.recommendations?.length || 0}`);
      if (data.recommendations?.length > 0) {
        console.log(`   First recommendation: ${data.recommendations[0].title}`);
        console.log(`   Type: ${data.recommendations[0].resourceType}`);
        console.log(`   Difficulty: ${data.recommendations[0].difficulty}`);
        console.log(`   Reasoning: ${data.recommendations[0].reasoning || 'N/A'}`);
        console.log(`   Priority: ${data.recommendations[0].priority || 'N/A'}`);
        console.log(`   Time: ${data.recommendations[0].estimatedTime || 'N/A'}`);
      }
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`‚ùå Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('‚ùå Error testing general recommendations:', error.message);
  }

  // Test 4: Updated AI recommendations route with DeepSeek (using valid course)
  try {
    console.log('\n4. Testing updated AI recommendations route with DeepSeek...');
    const response = await fetch(`${API_BASE}/api/ai-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId: 'data-structures', // Valid course ID
        useDeepSeek: true,
        quizResults: [
          {
            quizId: 'data-structures-basics',
            courseId: 'data-structures',
            quizTitle: 'Data Structures Basics',
            score: 70,
            total: 10,
            strengths: ['Arrays', 'Linked Lists'],
            weaknesses: ['Complexity Analysis', 'Recursion']
          }
        ]
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Success! Updated AI recommendations with DeepSeek');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Course: ${data.course?.title || 'N/A'}`);
      console.log(`   Performance: ${data.performance?.percentage || 'N/A'}%`);
      console.log(`   Recommendations: ${data.recommendations?.length || 0}`);
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`‚ùå Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('‚ùå Error testing updated AI recommendations:', error.message);
  }

  // Test 5: Test fallback functionality (useDeepSeek: false)
  try {
    console.log('\n5. Testing fallback functionality (useDeepSeek: false)...');
    const response = await fetch(`${API_BASE}/api/ai-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId: 'intro-to-python',
        useDeepSeek: false, // Force fallback to basic algorithm
        quizResults: [
          {
            quizId: 'python-basics',
            courseId: 'intro-to-python',
            quizTitle: 'Python Programming Basics',
            score: 80,
            total: 10,
            strengths: ['Basic Syntax', 'Variables'],
            weaknesses: ['Functions', 'Object-Oriented Programming']
          }
        ]
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Success! Fallback recommendations generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Course: ${data.course?.title || 'N/A'}`);
      console.log(`   Performance: ${data.performance?.percentage || 'N/A'}%`);
      console.log(`   Recommendations: ${data.recommendations?.length || 0}`);
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`‚ùå Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('‚ùå Error testing fallback functionality:', error.message);
  }

  // Test 6: Test Gemini study plan (existing functionality)
  try {
    console.log('\n6. Testing Gemini study plan (existing functionality)...');
    const response = await fetch(`${API_BASE}/api/study-plan?quizId=intro-to-cs&score=75&total=10&useGemini=true`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Success! Gemini study plan generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Course: ${data.courseTitle || 'N/A'}`);
      console.log(`   Current Level: ${data.currentLevel || 'N/A'}`);
      console.log(`   Target Score: ${data.targetScore || 'N/A'}%`);
      console.log(`   Study Steps: ${data.studySteps?.length || 0} steps`);
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`‚ùå Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('‚ùå Error testing Gemini study plan:', error.message);
  }

  console.log('\nüéâ DeepSeek integration testing completed!');
  console.log('\nüìù Summary:');
  console.log('   - DeepSeek API is configured and working');
  console.log('   - Fallback mechanisms are in place');
  console.log('   - Gemini study plans continue to work');
  console.log('   - Both AI services are properly separated');
}

// Run the test
testDeepSeekIntegrationFixed().catch(console.error); 