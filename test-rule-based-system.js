const fetch = require('node-fetch');

// Test configuration
const BASE_URL = 'http://localhost:3000/api';
const TEST_QUIZ_RESULTS = [
  {
    quizId: "quiz-1",
    courseId: "cs101",
    quizTitle: "Introduction to Programming",
    score: 6,
    total: 10,
    strengths: ["variables", "basic syntax"],
    weaknesses: ["functions", "loops"],
    timeSpent: 1200
  },
  {
    quizId: "quiz-2", 
    courseId: "cs102",
    quizTitle: "Data Structures",
    score: 8,
    total: 10,
    strengths: ["arrays", "linked lists"],
    weaknesses: ["trees"],
    timeSpent: 1800
  }
];

const TEST_USER_ID = "test-user-1";
const TEST_USER_PROFILE = {
  program: "computer-science",
  interests: ["web development", "algorithms"],
  recentTopics: ["JavaScript", "React"],
  learningStyle: "visual",
  preferredDifficulty: "intermediate",
  availableTime: 10,
  userId: TEST_USER_ID // Add userId
};

const TEST_QUIZ_CONTEXT = {
  quizId: "quiz-1",
  score: 6,
  totalQuestions: 10,
  courseId: "cs101",
  programId: "computer-science",
  courseTitle: "Introduction to Programming",
  timeSpent: 1200,
  difficulty: "intermediate",
  incorrectAnswers: ["functions", "loops"],
  userId: TEST_USER_ID // Add userId
};

async function testRuleBasedRecommendations() {
  console.log('\n🧪 Testing Rule-Based Recommendations System\n');
  console.log('=' .repeat(60));

  try {
    // Test 1: Course-specific recommendations
    console.log('\n📚 Test 1: Course-Specific Recommendations');
    console.log('-'.repeat(40));
    
    const courseRecommendations = await fetch(`${BASE_URL}/deepseek-recommendations`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        quizResults: TEST_QUIZ_RESULTS,
        userProfile: TEST_USER_PROFILE,
        courseId: "cs101"
      })
    });

    const courseRecData = await courseRecommendations.json();
    console.log('✅ Course-specific recommendations generated successfully');
    console.log(`📊 Generated by: ${courseRecData.generatedBy}`);
    console.log(`🔄 Fallback used: ${courseRecData.fallback || false}`);
    console.log(`📝 Number of recommendations: ${courseRecData.recommendations?.length || 0}`);
    
    if (courseRecData.recommendations) {
      courseRecData.recommendations.forEach((rec, index) => {
        console.log(`  ${index + 1}. ${rec.title} (${rec.difficulty}) - ${rec.estimatedTime}`);
        if (rec.personalizedSession) {
          console.log(`    Personalized Session:`, rec.personalizedSession);
        }
        if (rec.personalizedAdvice) {
          console.log(`    Personalized Advice:`, rec.personalizedAdvice);
        }
      });
    }

    // Test 2: General recommendations
    console.log('\n📚 Test 2: General Recommendations');
    console.log('-'.repeat(40));
    
    const generalRecommendations = await fetch(`${BASE_URL}/deepseek-recommendations`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        quizResults: TEST_QUIZ_RESULTS,
        userProfile: TEST_USER_PROFILE
      })
    });

    const generalRecData = await generalRecommendations.json();
    console.log('✅ General recommendations generated successfully');
    console.log(`📊 Generated by: ${generalRecData.generatedBy}`);
    console.log(`🔄 Fallback used: ${generalRecData.fallback || false}`);
    console.log(`📝 Number of recommendations: ${generalRecData.recommendations?.length || 0}`);

    if (generalRecData.recommendations) {
      generalRecData.recommendations.forEach((rec, index) => {
        if (rec.personalizedSession) {
          console.log(`    Personalized Session:`, rec.personalizedSession);
        }
        if (rec.personalizedAdvice) {
          console.log(`    Personalized Advice:`, rec.personalizedAdvice);
        }
      });
    }

    // Test 3: Filtered recommendations
    console.log('\n📚 Test 3: Filtered Recommendations (Program/Year/Semester)');
    console.log('-'.repeat(40));
    
    const filteredRecommendations = await fetch(`${BASE_URL}/deepseek-recommendations`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        quizResults: TEST_QUIZ_RESULTS,
        userProfile: TEST_USER_PROFILE,
        selectedProgram: "computer-science",
        selectedYear: "1",
        selectedSemester: "1"
      })
    });

    const filteredRecData = await filteredRecommendations.json();
    console.log('✅ Filtered recommendations generated successfully');
    console.log(`📊 Generated by: ${filteredRecData.generatedBy}`);
    console.log(`🔄 Fallback used: ${filteredRecData.fallback || false}`);
    console.log(`📝 Number of course recommendations: ${filteredRecData.courseRecommendations?.length || 0}`);

  } catch (error) {
    console.error('❌ Error testing recommendations:', error.message);
  }
}

async function testRuleBasedStudyPlans() {
  console.log('\n📖 Testing Rule-Based Study Plan System\n');
  console.log('=' .repeat(60));

  try {
    // Test 1: Single course study plan
    console.log('\n📖 Test 1: Single Course Study Plan');
    console.log('-'.repeat(40));
    
    const singleStudyPlan = await fetch(`${BASE_URL}/gemini-study-plan`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(TEST_QUIZ_CONTEXT)
    });

    const singlePlanData = await singleStudyPlan.json();
    console.log('✅ Single course study plan generated successfully');
    console.log(`📊 Generated by: ${singlePlanData.generatedBy}`);
    console.log(`🔄 Fallback used: ${singlePlanData.fallback || false}`);
    
    if (singlePlanData.studyPlan) {
      if (singlePlanData.studyPlan.personalizedSchedule) {
        console.log('🗓️ Personalized Schedule:', singlePlanData.studyPlan.personalizedSchedule);
      }
      if (singlePlanData.studyPlan.personalizedAdvice) {
        console.log('💡 Personalized Advice:', singlePlanData.studyPlan.personalizedAdvice);
      }
      console.log(`📈 Current Level: ${singlePlanData.studyPlan.currentLevel}`);
      console.log(`🎯 Target Score: ${singlePlanData.studyPlan.targetScore}%`);
      console.log(`📝 Study Steps: ${singlePlanData.studyPlan.studySteps.length}`);
      console.log(`⏰ Time Allocation: ${JSON.stringify(singlePlanData.studyPlan.timeAllocation)}`);
    }

    // Test 2: Multi-course study plan
    console.log('\n📖 Test 2: Multi-Course Study Plan');
    console.log('-'.repeat(40));
    
    const multiStudyPlan = await fetch(`${BASE_URL}/gemini-study-plan`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        multipleQuizzes: [
          {
            quizId: "quiz-1",
            score: 6,
            totalQuestions: 10,
            courseId: "cs101",
            programId: "computer-science",
            courseTitle: "Introduction to Programming"
          },
          {
            quizId: "quiz-2",
            score: 8,
            totalQuestions: 10,
            courseId: "cs102",
            programId: "computer-science",
            courseTitle: "Data Structures"
          }
        ]
      })
    });

    const multiPlanData = await multiStudyPlan.json();
    console.log('✅ Multi-course study plan generated successfully');
    console.log(`📊 Generated by: ${multiPlanData.generatedBy}`);
    console.log(`🔄 Fallback used: ${multiPlanData.fallback || false}`);
    console.log(`📝 Number of courses: ${multiPlanData.totalCourses}`);

    // Test 3: Program-wide study plan
    console.log('\n📖 Test 3: Program-Wide Study Plan');
    console.log('-'.repeat(40));
    
    const programStudyPlan = await fetch(`${BASE_URL}/gemini-study-plan`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        programWide: {
          programId: "computer-science",
          quizResults: [
            {
              quizId: "quiz-1",
              score: 6,
              totalQuestions: 10,
              courseId: "cs101",
              courseTitle: "Introduction to Programming"
            },
            {
              quizId: "quiz-2",
              score: 8,
              totalQuestions: 10,
              courseId: "cs102",
              courseTitle: "Data Structures"
            }
          ]
        }
      })
    });

    const programPlanData = await programStudyPlan.json();
    console.log('✅ Program-wide study plan generated successfully');
    console.log(`📊 Generated by: ${programPlanData.generatedBy}`);
    console.log(`🔄 Fallback used: ${programPlanData.fallback || false}`);
    console.log(`📝 Number of courses: ${programPlanData.totalCourses}`);
    
    if (programPlanData.programPlan) {
      console.log(`📋 Program Overview: ${programPlanData.programPlan.programOverview.substring(0, 100)}...`);
      console.log(`🎯 Program Goals: ${programPlanData.programPlan.programGoals.length} goals defined`);
    }

  } catch (error) {
    console.error('❌ Error testing study plans:', error.message);
  }
}

async function testPerformanceBasedLogic() {
  console.log('\n📊 Testing Performance-Based Logic\n');
  console.log('=' .repeat(60));

  try {
    // Test different performance levels
    const performanceLevels = [
      { score: 2, total: 10, level: "Beginner (20%)" },
      { score: 5, total: 10, level: "Intermediate (50%)" },
      { score: 8, total: 10, level: "Advanced (80%)" }
    ];

    for (const perf of performanceLevels) {
      console.log(`\n📊 Testing ${perf.level} Performance Level`);
      console.log('-'.repeat(40));
      
      const studyPlan = await fetch(`${BASE_URL}/gemini-study-plan`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          quizId: "quiz-1",
          score: perf.score,
          totalQuestions: perf.total,
          programId: "computer-science",
          courseId: "cs101",
          courseTitle: "Introduction to Programming"
        })
      });

      const planData = await studyPlan.json();
      console.log(`✅ Study plan generated for ${perf.level}`);
      console.log(`📊 Generated by: ${planData.generatedBy}`);
      
      if (planData.studyPlan) {
        console.log(`📈 Current Level: ${planData.studyPlan.currentLevel}`);
        console.log(`🎯 Target Score: ${planData.studyPlan.targetScore}%`);
        console.log(`💡 Advice: ${planData.studyPlan.personalizedAdvice.substring(0, 80)}...`);
        console.log(`📝 Focus Areas: ${planData.studyPlan.focusAreas.length} areas`);
      }
    }

  } catch (error) {
    console.error('❌ Error testing performance-based logic:', error.message);
  }
}

async function testErrorHandling() {
  console.log('\n⚠️ Testing Error Handling\n');
  console.log('=' .repeat(60));

  try {
    // Test with invalid quiz ID
    console.log('\n⚠️ Test 1: Invalid Quiz ID');
    console.log('-'.repeat(40));
    
    const invalidQuiz = await fetch(`${BASE_URL}/gemini-study-plan`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        quizId: "invalid-quiz-id",
        score: 5,
        totalQuestions: 10
      })
    });

    const invalidData = await invalidQuiz.json();
    console.log(`📊 Response: ${invalidData.error || 'Success'}`);
    console.log(`🔄 Fallback used: ${invalidData.fallback || false}`);

    // Test with missing required fields
    console.log('\n⚠️ Test 2: Missing Required Fields');
    console.log('-'.repeat(40));
    
    const missingFields = await fetch(`${BASE_URL}/gemini-study-plan`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        quizId: "quiz-1"
        // Missing score and totalQuestions
      })
    });

    const missingData = await missingFields.json();
    console.log(`📊 Response: ${missingData.error || 'Success'}`);

  } catch (error) {
    console.error('❌ Error testing error handling:', error.message);
  }
}

async function runAllTests() {
  console.log('🚀 Starting Rule-Based System Tests\n');
  console.log('=' .repeat(60));
  console.log('This test suite demonstrates the rule-based fallback system');
  console.log('for recommendations and study plans when AI services fail.\n');

  await testRuleBasedRecommendations();
  await testRuleBasedStudyPlans();
  await testPerformanceBasedLogic();
  await testErrorHandling();

  console.log('\n🎉 All tests completed!');
  console.log('\n📋 Summary:');
  console.log('✅ Rule-based recommendations system working');
  console.log('✅ Rule-based study plan system working');
  console.log('✅ Performance-based logic working');
  console.log('✅ Error handling working');
  console.log('✅ Fallback mechanism functioning properly');
}

// Run the tests
runAllTests().catch(console.error); 