// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  image     String?
  accounts  Account[]
  sessions  Session[]
  submissions QuizSubmission[]
}

model Quiz {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  String
  timeLimit   Int
  tags        String[]
  questions   Question[]
  submissions QuizSubmission[]
}

model Question {
  id        String   @id @default(uuid())
  text      String
  options   String[]
  correctAnswer String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
}

model Recommendation {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  type        String
  tags        String[]
  difficulty  String
}

model QuizSubmission {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  answers   Json
  result    QuizResult?
  createdAt DateTime @default(now())
}

model QuizResult {
  id              String   @id @default(uuid())
  submission      QuizSubmission @relation(fields: [submissionId], references: [id])
  submissionId    String   @unique
  score           Int
  totalQuestions  Int
  correctAnswers  Int[]
  incorrectAnswers Int[]
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}
