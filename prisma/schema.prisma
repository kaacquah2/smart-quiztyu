generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Program {
  id          String   @id @default(uuid())
  title       String
  description String
  years       Year[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Year {
  id        String     @id @default(uuid())
  year      Int
  programId String
  program   Program    @relation(fields: [programId], references: [id], onDelete: Cascade)
  semesters Semester[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([programId, year])
}

model Semester {
  id        String   @id @default(uuid())
  semester  Int
  yearId    String
  year      Year     @relation(fields: [yearId], references: [id], onDelete: Cascade)
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([yearId, semester])
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  semesterId  String
  semester    Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  quizzes     Quiz[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  image             String?
  programId         String?
  program           Program?           @relation(fields: [programId], references: [id])
  bio               String?
  year              Int?               @default(1)
  city              String?
  country           String?
  latitude          Float?
  longitude         Float?
  region            String?
  timezone          String?
  accounts          Account[]
  followers         Follows[]          @relation("UserFollowers")
  following         Follows[]          @relation("UserFollowing")
  notifications     Notification[]
  offlineData       OfflineData[]
  submissions       QuizSubmission[]
  sessions          Session[]
  socialActivities  SocialActivity[]
  studyGroupMembers StudyGroupMember[]
  studySessions     StudySession[]
  userAchievements  UserAchievement[]
  userAnalytics     UserAnalytics?
  userStreaks       UserStreak[]
  personalizationProfile PersonalizationProfile?
}

model Quiz {
  id          String           @id @default(uuid())
  title       String
  description String
  difficulty  String
  timeLimit   Int
  tags        String[]
  courseId    String?
  course      Course?          @relation(fields: [courseId], references: [id])
  questions   Question[]
  submissions QuizSubmission[]
  isActive    Boolean          @default(true)
  maxAttempts Int              @default(3)
  passingScore Int             @default(70)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Question {
  id            String   @id @default(uuid())
  text          String
  options       String[]
  correctAnswer String
  explanation   String
  difficulty    String   @default("Medium")
  category      String?
  tags          String[] @default([])
  points        Int      @default(1)
  timeLimit     Int?
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Recommendation {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  type        String
  tags        String[]
  difficulty  String
}

model Resource {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  platform    String
  type        String
  category    String
  tags        String[]
  duration    String
  rating      Float
  views       Int?
  lessons     Int?
  videos      Int?
  courseIds   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuizSubmission {
  id        String      @id @default(uuid())
  userId    String
  quizId    String
  answers   Json
  createdAt DateTime    @default(now())
  timeSpent Int?
  result    QuizResult?
  quiz      Quiz        @relation(fields: [quizId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model QuizResult {
  id               String         @id @default(uuid())
  submissionId     String         @unique
  score            Int
  totalQuestions   Int
  correctAnswers   Int[]
  incorrectAnswers Int[]
  timeSpent        Int?           // Total time spent in seconds
  percentage       Float          // Percentage score
  passed           Boolean        // Whether the quiz was passed
  feedback         String?        // General feedback for the user
  detailedAnswers  Json?          // Detailed breakdown of each answer
  submission       QuizSubmission @relation(fields: [submissionId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model UserAnalytics {
  id              String   @id @default(uuid())
  userId          String   @unique
  averageScore    Float    @default(0)
  totalQuizzes    Int      @default(0)
  totalQuestions  Int      @default(0)
  totalStudyHours Float    @default(0)
  improvementRate Float    @default(0)
  weakAreas       String[]
  strongAreas     String[]
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model UserActivity {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  metadata     Json?
  timestamp    DateTime @default(now())
  sessionId    String?
  page         String?
  duration     Int?
}

model UserAchievement {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  type        String
  metadata    Json?
  earnedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model UserStreak {
  id            String   @id @default(uuid())
  userId        String
  type          String
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActivity  DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model SocialActivity {
  id        String   @id @default(uuid())
  userId    String
  type      String
  content   Json
  likes     Int      @default(0)
  comments  Int      @default(0)
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Follows {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model StudyGroup {
  id          String             @id @default(uuid())
  name        String
  description String?
  category    String
  avatar      String?
  isPublic    Boolean            @default(true)
  maxMembers  Int                @default(100)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  members     StudyGroupMember[]
}

model StudyGroupMember {
  id       String     @id @default(uuid())
  userId   String
  groupId  String
  role     String     @default("member")
  joinedAt DateTime   @default(now())
  group    StudyGroup @relation(fields: [groupId], references: [id])
  user     User       @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  metadata  Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model OfflineData {
  id         String    @id @default(uuid())
  userId     String
  dataType   String
  data       Json
  syncStatus String    @default("pending")
  createdAt  DateTime  @default(now())
  syncedAt   DateTime?
  user       User      @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudySession {
  id          String   @id @default(uuid())
  userId      String
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int?     // in minutes
  courseId    String?
  topics      String[]
  notes       String?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New models for caching API-generated content
model CachedRecommendation {
  id              String   @id @default(uuid())
  userId          String?
  courseId        String?
  programId       String?
  quizResultsHash String   // Hash of quiz results for cache key
  apiProvider     String   // 'deepseek', 'gemini', 'rule-based'
  recommendations Json     // Stored recommendations
  performance     Json?    // Performance data used for generation
  userProfile     Json?    // User profile data used for generation
  confidence      Float    // Confidence score of the recommendations
  expiresAt       DateTime // Cache expiration time
  hitCount        Int      @default(0) // Number of times this cache was used
  lastAccessed    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([quizResultsHash, apiProvider])
  @@index([userId, courseId])
  @@index([expiresAt])
}

model CachedStudyPlan {
  id              String   @id @default(uuid())
  userId          String?
  courseId        String?
  quizContextHash String   // Hash of quiz context for cache key
  apiProvider     String   // 'gemini', 'rule-based'
  studyPlan       Json     // Stored study plan
  quizContext     Json     // Quiz context used for generation
  confidence      Float    // Confidence score of the study plan
  expiresAt       DateTime // Cache expiration time
  hitCount        Int      @default(0) // Number of times this cache was used
  lastAccessed    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([quizContextHash, apiProvider])
  @@index([userId, courseId])
  @@index([expiresAt])
}

model APILog {
  id            String   @id @default(uuid())
  userId        String?
  apiProvider   String   // 'deepseek', 'gemini', 'youtube'
  endpoint      String   // API endpoint called
  requestData   Json?    // Request data sent to API
  responseData  Json?    // Response data from API
  statusCode    Int?     // HTTP status code
  responseTime  Int?     // Response time in milliseconds
  success       Boolean  // Whether the API call was successful
  errorMessage  String?  // Error message if failed
  cacheHit      Boolean  @default(false) // Whether this was served from cache
  cost          Float?   // API cost in USD
  tokens        Int?     // Number of tokens used
  createdAt     DateTime @default(now())

  @@index([userId, apiProvider])
  @@index([createdAt])
  @@index([success])
}

model PersonalizationProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  learningStyle     String?  // 'visual', 'auditory', 'kinesthetic', 'reading'
  preferredDifficulty String? // 'beginner', 'intermediate', 'advanced'
  availableTime     Int?     // hours per week
  studyPatterns     Json?    // Detailed study pattern data
  interests         String[] // Learning interests
  recentTopics      String[] // Recently studied topics
  performanceHistory Json?   // Historical performance data
  preferences       Json?    // User preferences for recommendations
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])

  @@index([learningStyle, preferredDifficulty])
}
