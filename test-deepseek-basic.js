const fetch = require('node-fetch');

async function testDeepSeekBasic() {
  console.log('🧠 Testing DeepSeek Integration - Basic Functionality...\n');

  const API_BASE = 'http://localhost:3001';

  // Test 1: Test fallback functionality (useDeepSeek: false) with valid course
  try {
    console.log('1. Testing fallback functionality with valid course...');
    const response = await fetch(`${API_BASE}/api/ai-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId: 'intro-to-cs', // Valid course ID
        useDeepSeek: false, // Force fallback to basic algorithm
        quizResults: [
          {
            quizId: 'intro-to-cs-basics',
            courseId: 'intro-to-cs',
            quizTitle: 'Introduction to Computer Science Basics',
            score: 80,
            total: 10,
            strengths: ['Basic Programming', 'Problem Solving'],
            weaknesses: ['Advanced Algorithms', 'Data Structures']
          }
        ]
      })
    });

    console.log(`Response status: ${response.status}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('✅ Success! Fallback recommendations generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Course: ${data.course?.title || 'N/A'}`);
      console.log(`   Course ID: ${data.course?.id || 'N/A'}`);
      console.log(`   Program: ${data.course?.programTitle || 'N/A'}`);
      console.log(`   Performance: ${data.performance?.percentage || 'N/A'}%`);
      console.log(`   Recommendations: ${data.recommendations?.length || 0}`);
      if (data.recommendations?.length > 0) {
        console.log(`   First recommendation: ${data.recommendations[0].title}`);
        console.log(`   Type: ${data.recommendations[0].resourceType || data.recommendations[0].type}`);
      }
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`❌ Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('❌ Error testing fallback functionality:', error.message);
  }

  // Test 2: Test with another valid course
  try {
    console.log('\n2. Testing with data-structures course...');
    const response = await fetch(`${API_BASE}/api/ai-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId: 'data-structures', // Valid course ID
        useDeepSeek: false, // Force fallback to basic algorithm
        quizResults: [
          {
            quizId: 'data-structures-basics',
            courseId: 'data-structures',
            quizTitle: 'Data Structures Basics',
            score: 70,
            total: 10,
            strengths: ['Arrays', 'Linked Lists'],
            weaknesses: ['Complexity Analysis', 'Recursion']
          }
        ]
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('✅ Success! Data structures recommendations generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Course: ${data.course?.title || 'N/A'}`);
      console.log(`   Course ID: ${data.course?.id || 'N/A'}`);
      console.log(`   Program: ${data.course?.programTitle || 'N/A'}`);
      console.log(`   Year: ${data.course?.year || 'N/A'}, Semester: ${data.course?.semester || 'N/A'}`);
      console.log(`   Performance: ${data.performance?.percentage || 'N/A'}%`);
      console.log(`   Recommendations: ${data.recommendations?.length || 0}`);
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`❌ Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('❌ Error testing data structures course:', error.message);
  }

  // Test 3: Test filtered recommendations with fallback
  try {
    console.log('\n3. Testing filtered recommendations with fallback...');
    const response = await fetch(`${API_BASE}/api/ai-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        selectedProgram: 'computer-science',
        selectedYear: '1',
        selectedSemester: '1',
        useDeepSeek: false, // Force fallback
        quizResults: [
          {
            quizId: 'intro-to-cs',
            courseId: 'intro-to-cs',
            quizTitle: 'Introduction to Computer Science',
            score: 75,
            total: 10,
            strengths: ['Basic Programming', 'Problem Solving'],
            weaknesses: ['Advanced Algorithms', 'Data Structures']
          }
        ]
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('✅ Success! Filtered recommendations generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Course Recommendations: ${data.courseRecommendations?.length || 0}`);
      if (data.courseRecommendations?.length > 0) {
        console.log(`   First course: ${data.courseRecommendations[0].courseTitle}`);
        console.log(`   Course ID: ${data.courseRecommendations[0].courseId}`);
        console.log(`   Program: ${data.courseRecommendations[0].programTitle}`);
        console.log(`   Year: ${data.courseRecommendations[0].year}, Semester: ${data.courseRecommendations[0].semester}`);
        console.log(`   Recommendations: ${data.courseRecommendations[0].recommendations?.length || 0}`);
      }
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`❌ Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('❌ Error testing filtered recommendations:', error.message);
  }

  // Test 4: Test Gemini study plan (existing functionality)
  try {
    console.log('\n4. Testing Gemini study plan...');
    const response = await fetch(`${API_BASE}/api/study-plan?quizId=intro-to-cs&score=75&total=10&useGemini=true`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('✅ Success! Gemini study plan generated');
      console.log(`   Generated By: ${data.generatedBy || 'Unknown'}`);
      console.log(`   Enhanced: ${data.enhanced ? 'Yes' : 'No'}`);
      console.log(`   Course: ${data.courseTitle || 'N/A'}`);
      console.log(`   Current Level: ${data.currentLevel || 'N/A'}`);
      console.log(`   Target Score: ${data.targetScore || 'N/A'}%`);
      console.log(`   Study Steps: ${data.studySteps?.length || 0} steps`);
      if (data.studySteps?.length > 0) {
        console.log(`   First step: ${data.studySteps[0]}`);
      }
    } else {
      const errorData = await response.json().catch(() => ({}));
      console.log(`❌ Error: ${response.status} - ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.log('❌ Error testing Gemini study plan:', error.message);
  }

  // Test 5: Test DeepSeek API configuration (without making actual calls)
  try {
    console.log('\n5. Testing DeepSeek API configuration...');
    const response = await fetch(`${API_BASE}/api/deepseek-recommendations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId: 'intro-to-cs',
        quizResults: []
      })
    });

    // We expect either a success or a quota error, but not a 500 internal server error
    if (response.status === 500) {
      const errorData = await response.json().catch(() => ({}));
      if (errorData.error && errorData.error.includes('API key not configured')) {
        console.log('⚠️  DeepSeek API key not configured (expected if using placeholder)');
      } else {
        console.log(`❌ Unexpected 500 error: ${errorData.error || response.statusText}`);
      }
    } else if (response.status === 200) {
      console.log('✅ DeepSeek API is working!');
    } else {
      const errorData = await response.json().catch(() => ({}));
      if (errorData.error && errorData.error.includes('quota')) {
        console.log('⚠️  DeepSeek API quota exceeded (expected with limited credits)');
      } else {
        console.log(`⚠️  DeepSeek API response: ${response.status} - ${errorData.error || response.statusText}`);
      }
    }
  } catch (error) {
    console.log('❌ Error testing DeepSeek API configuration:', error.message);
  }

  console.log('\n🎉 Basic DeepSeek integration testing completed!');
  console.log('\n📝 Summary:');
  console.log('   ✅ Course mapping is working correctly');
  console.log('   ✅ Fallback mechanisms are functional');
  console.log('   ✅ Gemini study plans continue to work');
  console.log('   ✅ API routes are properly configured');
  console.log('   ⚠️  DeepSeek API may have quota limitations');
  console.log('\n💡 Next steps:');
  console.log('   - Get more DeepSeek API credits if needed');
  console.log('   - Test with real API calls when quota is available');
  console.log('   - The fallback system ensures the app works without DeepSeek');
}

// Run the test
testDeepSeekBasic().catch(console.error); 