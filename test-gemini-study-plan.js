// Test script for Gemini Study Plan functionality
// Run with: node test-gemini-study-plan.js

require('dotenv').config();

const API_BASE = 'http://localhost:3000/api';

// Test cases for different courses and performance levels
const testCases = [
  // Computer Science - Different performance levels
  {
    quizId: "intro-to-cs",
    score: 2,
    total: 5,
    expectedProgram: "computer-science",
    description: "Computer Science - Moderate performance (40%)"
  },
  {
    quizId: "data-structures",
    score: 4,
    total: 5,
    expectedProgram: "computer-science",
    description: "Computer Science - Good performance (80%)"
  },
  {
    quizId: "artificial-intelligence",
    score: 1,
    total: 5,
    expectedProgram: "computer-science",
    description: "Computer Science - Poor performance (20%)"
  },
  
  // Electrical Engineering - Different performance levels
  {
    quizId: "circuit-analysis",
    score: 3,
    total: 5,
    expectedProgram: "electrical-engineering",
    description: "Electrical Engineering - Moderate performance (60%)"
  },
  {
    quizId: "electronics-1",
    score: 5,
    total: 5,
    expectedProgram: "electrical-engineering",
    description: "Electrical Engineering - Excellent performance (100%)"
  },
  
  // Business Administration - Different performance levels
  {
    quizId: "intro-business",
    score: 2,
    total: 5,
    expectedProgram: "business-admin",
    description: "Business Administration - Moderate performance (40%)"
  },
  {
    quizId: "financial-accounting",
    score: 4,
    total: 5,
    expectedProgram: "business-admin",
    description: "Business Administration - Good performance (80%)"
  },
  
  // Nursing - Different performance levels
  {
    quizId: "anatomy-physiology-1",
    score: 3,
    total: 5,
    expectedProgram: "nursing",
    description: "Nursing - Moderate performance (60%)"
  },
  {
    quizId: "health-assessment",
    score: 4,
    total: 5,
    expectedProgram: "nursing",
    description: "Nursing - Good performance (80%)"
  }
];

async function testGeminiStudyPlan() {
  console.log("üß™ Testing Gemini Study Plan Generation");
  console.log("=" .repeat(60));
  
  // Check if Gemini API key is configured
  if (!process.env.GEMINI_API_KEY || process.env.GEMINI_API_KEY === "your-gemini-api-key-here") {
    console.log("‚ùå GEMINI_API_KEY not configured in .env file");
    console.log("Please set your Gemini API key to test the enhanced study plans");
    return;
  }
  
  console.log("‚úÖ Gemini API key configured");
  console.log("‚úÖ Testing enhanced study plan generation for all courses\n");
  
  let passedTests = 0;
  let totalTests = testCases.length;
  
  for (const testCase of testCases) {
    console.log(`üìã Test: ${testCase.description}`);
    console.log(`   Quiz ID: ${testCase.quizId}`);
    console.log(`   Score: ${testCase.score}/${testCase.total} (${Math.round((testCase.score/testCase.total)*100)}%)`);
    console.log(`   Expected Program: ${testCase.expectedProgram}`);
    
    try {
      // Test the enhanced study plan API
      const response = await fetch(`${API_BASE}/study-plan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          quizId: testCase.quizId,
          score: testCase.score,
          totalQuestions: testCase.total,
          useGemini: true
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        
        if (data.success && data.studyPlan) {
          const plan = data.studyPlan;
          console.log(`   ‚úÖ Enhanced Study Plan Generated Successfully`);
          console.log(`      Course: ${plan.courseTitle}`);
          console.log(`      Current Level: ${plan.currentLevel}`);
          console.log(`      Target Score: ${plan.targetScore}%`);
          console.log(`      Program ID: ${plan.programId}`);
          console.log(`      Generated By: ${plan.generatedBy || 'Unknown'}`);
          console.log(`      Enhanced: ${plan.enhanced ? 'Yes' : 'No'}`);
          
          // Test enhanced features
          if (plan.enhanced) {
            console.log(`      üéØ Enhanced Features:`);
            if (plan.personalizedAdvice) {
              console.log(`         - Personalized Advice: ${plan.personalizedAdvice.substring(0, 50)}...`);
            }
            if (plan.focusAreas && plan.focusAreas.length > 0) {
              console.log(`         - Focus Areas: ${plan.focusAreas.length} areas`);
            }
            if (plan.timeAllocation) {
              console.log(`         - Time Allocation: ${plan.timeAllocation.conceptReview}% concept review`);
            }
            if (plan.weeklyGoals && plan.weeklyGoals.length > 0) {
              console.log(`         - Weekly Goals: ${plan.weeklyGoals.length} goals`);
            }
            if (plan.resources) {
              const totalResources = (plan.resources.primary?.length || 0) + 
                                   (plan.resources.supplementary?.length || 0) + 
                                   (plan.resources.practice?.length || 0);
              console.log(`         - Resources: ${totalResources} total recommendations`);
            }
            if (plan.estimatedImprovement) {
              console.log(`         - Estimated Improvement: ${plan.estimatedImprovement}`);
            }
            if (plan.nextMilestone) {
              console.log(`         - Next Milestone: ${plan.nextMilestone}`);
            }
          }
          
          // Test basic features
          console.log(`      üìö Basic Features:`);
          console.log(`         - Study Steps: ${plan.studySteps?.length || 0} steps`);
          console.log(`         - Recommendations: ${plan.recommendations?.length || 0} items`);
          
          // Validate program detection
          if (plan.programId === testCase.expectedProgram) {
            console.log(`      ‚úÖ Program matches expected: ${testCase.expectedProgram}`);
          } else {
            console.log(`      ‚ö†Ô∏è  Program mismatch. Expected: ${testCase.expectedProgram}, Got: ${plan.programId}`);
          }
          
          // Validate level detection based on performance
          const percentage = (testCase.score / testCase.total) * 100;
          let expectedLevel = "Intermediate";
          if (percentage < 40) expectedLevel = "Beginner";
          else if (percentage > 70) expectedLevel = "Advanced";
          
          if (plan.currentLevel === expectedLevel) {
            console.log(`      ‚úÖ Level matches expected: ${expectedLevel}`);
          } else {
            console.log(`      ‚ö†Ô∏è  Level mismatch. Expected: ${expectedLevel}, Got: ${plan.currentLevel}`);
          }
          
          passedTests++;
          
        } else {
          console.log(`   ‚ùå Error: ${data.error || 'Unknown error'}`);
        }
      } else {
        const errorText = await response.text();
        console.log(`   ‚ùå API Error: ${response.status} - ${errorText.substring(0, 100)}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error testing study plan: ${error.message}`);
    }
    
    console.log("");
  }
  
  // Test multi-course study plan
  console.log("üìö Testing Multi-Course Study Plan Generation");
  console.log("-".repeat(40));
  
  try {
    const multiCourseResponse = await fetch(`${API_BASE}/gemini-study-plan`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        multipleQuizzes: testCases.slice(0, 3).map(tc => ({
          quizId: tc.quizId,
          score: tc.score,
          totalQuestions: tc.total,
          courseId: tc.quizId,
          programId: tc.expectedProgram,
          courseTitle: tc.description.split(' - ')[1] || 'Test Course'
        }))
      })
    });
    
    if (multiCourseResponse.ok) {
      const data = await multiCourseResponse.json();
      if (data.success && data.studyPlans) {
        console.log(`‚úÖ Multi-course study plan generated successfully`);
        console.log(`   Total courses: ${data.totalCourses}`);
        console.log(`   Generated by: ${data.generatedBy}`);
        
        Object.keys(data.studyPlans).forEach(courseId => {
          const plan = data.studyPlans[courseId];
          console.log(`   - ${plan.courseTitle}: ${plan.currentLevel} level`);
        });
        
        passedTests++;
      } else {
        console.log(`‚ùå Multi-course error: ${data.error || 'Unknown error'}`);
      }
    } else {
      console.log(`‚ùå Multi-course API error: ${multiCourseResponse.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Multi-course test error: ${error.message}`);
  }
  
  console.log("\n" + "=" .repeat(60));
  console.log("üìä GEMINI STUDY PLAN TEST RESULTS");
  console.log("=" .repeat(60));
  console.log(`‚úÖ Passed: ${passedTests}/${totalTests + 1} tests`);
  console.log(`‚ùå Failed: ${totalTests + 1 - passedTests} tests`);
  
  if (passedTests === totalTests + 1) {
    console.log("\nüéâ All tests passed! Gemini study plan generation is working perfectly.");
    console.log("‚úÖ Enhanced study plans with personalized advice");
    console.log("‚úÖ Focus areas and time allocation recommendations");
    console.log("‚úÖ Weekly goals and resource recommendations");
    console.log("‚úÖ Multi-course study plan generation");
    console.log("‚úÖ Program-specific customization");
  } else {
    console.log("\n‚ö†Ô∏è  Some tests failed. Check the API configuration and server status.");
  }
  
  console.log("\nüéØ Next Steps:");
  console.log("‚Ä¢ The Gemini study plan service is integrated into the results page");
  console.log("‚Ä¢ Users will automatically get enhanced study plans after quizzes");
  console.log("‚Ä¢ The system falls back to basic plans if Gemini is unavailable");
  console.log("‚Ä¢ All courses across all programs are supported");
}

// Run the test
testGeminiStudyPlan().catch(console.error); 